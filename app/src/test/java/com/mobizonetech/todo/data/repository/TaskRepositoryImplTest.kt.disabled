package com.mobizonetech.todo.data.repository

import com.mobizonetech.todo.data.api.TodoApiService
import com.mobizonetech.todo.data.api.models.ApiResponse
import com.mobizonetech.todo.data.database.dao.TaskDao
import com.mobizonetech.todo.data.database.entities.TaskEntity
import com.mobizonetech.todo.domain.models.Task
import com.mobizonetech.todo.domain.models.TaskPriority
import io.mockk.coEvery
import io.mockk.mockk
import kotlinx.coroutines.test.runTest
import org.junit.Assert.assertEquals
import org.junit.Assert.assertFalse
import org.junit.Assert.assertNotNull
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Test
import java.time.LocalDateTime

class TaskRepositoryImplTest {

    private lateinit var taskRepositoryImpl: TaskRepositoryImpl
    private lateinit var todoApiService: TodoApiService
    private lateinit var taskDao: TaskDao

    @Before
    fun setup() {
        todoApiService = mockk()
        taskDao = mockk()
        taskRepositoryImpl = TaskRepositoryImpl(todoApiService, taskDao)
    }

    @Test
    fun `getTasks should return tasks from API when successful`() = runTest {
        val now = LocalDateTime.now()
        val mockTasks = listOf(
            Task(
                id = "1",
                title = "Test Task 1",
                description = "Description 1",
                priority = TaskPriority.HIGH,
                dueDate = LocalDateTime.now().plusDays(1),
                completed = false,
                createdAt = now,
                updatedAt = now
            ),
            Task(
                id = "2",
                title = "Test Task 2",
                description = "Description 2",
                priority = TaskPriority.MEDIUM,
                dueDate = LocalDateTime.now().plusDays(2),
                completed = true,
                createdAt = now,
                updatedAt = now
            )
        )

        coEvery { todoApiService.getTasks() } returns ApiResponse.success(mockTasks)
        coEvery { taskDao.insertAll(any()) } returns Unit

        val result = taskRepositoryImpl.getTasks()

        assertTrue(result.isSuccess)
        assertEquals(mockTasks, result.getOrNull())
    }

    @Test
    fun `getTasks should return tasks from database when API fails`() = runTest {
        val now = LocalDateTime.now()
        val mockTaskEntities = listOf(
            TaskEntity(
                id = "1",
                title = "Database Task 1",
                description = "DB Description 1",
                priority = "HIGH",
                dueDate = LocalDateTime.now().plusDays(1),
                completed = false,
                createdAt = now,
                updatedAt = now
            )
        )

        coEvery { todoApiService.getTasks() } throws Exception("Network error")
        coEvery { taskDao.getAllTasks() } returns mockTaskEntities

        val result = taskRepositoryImpl.getTasks()

        assertTrue(result.isSuccess)
        assertNotNull(result.getOrNull())
        assertEquals(1, result.getOrNull()?.size)
    }

    @Test
    fun `createTask should return success when API call succeeds`() = runTest {
        val now = LocalDateTime.now()
        val task = Task(
            id = "0",
            title = "New Task",
            description = "New description",
            priority = TaskPriority.LOW,
            dueDate = LocalDateTime.now().plusDays(1),
            completed = false,
            createdAt = now,
            updatedAt = now
        )
        val expectedMessage = "Task created successfully"

        coEvery { todoApiService.createTask(any()) } returns ApiResponse.success(expectedMessage)
        coEvery { taskDao.insert(any()) } returns Unit

        val result = taskRepositoryImpl.createTask(task)

        assertTrue(result.isSuccess)
        assertEquals(expectedMessage, result.getOrNull())
    }

    @Test
    fun `createTask should handle API failure`() = runTest {
        val now = LocalDateTime.now()
        val task = Task(
            id = "0",
            title = "New Task",
            description = "New description",
            priority = TaskPriority.MEDIUM,
            dueDate = LocalDateTime.now().plusDays(1),
            completed = false,
            createdAt = now,
            updatedAt = now
        )

        coEvery { todoApiService.createTask(any()) } throws Exception("API error")
        coEvery { taskDao.insert(any()) } returns Unit

        val result = taskRepositoryImpl.createTask(task)

        assertTrue(result.isFailure)
        assertEquals("API error", result.exceptionOrNull()?.message)
    }

    @Test
    fun `updateTask should return success when API call succeeds`() = runTest {
        val now = LocalDateTime.now()
        val task = Task(
            id = "1",
            title = "Updated Task",
            description = "Updated description",
            priority = TaskPriority.HIGH,
            dueDate = LocalDateTime.now().plusDays(1),
            completed = false,
            createdAt = now,
            updatedAt = now
        )
        val expectedMessage = "Task updated successfully"

        coEvery { todoApiService.updateTask(any()) } returns ApiResponse.success(expectedMessage)
        coEvery { taskDao.update(any()) } returns Unit

        val result = taskRepositoryImpl.updateTask(task)

        assertTrue(result.isSuccess)
        assertEquals(expectedMessage, result.getOrNull())
    }

    @Test
    fun `updateTask should handle API failure`() = runTest {
        val now = LocalDateTime.now()
        val task = Task(
            id = "1",
            title = "Updated Task",
            description = "Updated description",
            priority = TaskPriority.LOW,
            dueDate = LocalDateTime.now().plusDays(1),
            completed = false,
            createdAt = now,
            updatedAt = now
        )

        coEvery { todoApiService.updateTask(any()) } throws Exception("API error")
        coEvery { taskDao.update(any()) } returns Unit

        val result = taskRepositoryImpl.updateTask(task)

        assertTrue(result.isFailure)
        assertEquals("API error", result.exceptionOrNull()?.message)
    }

    @Test
    fun `deleteTask should return success when API call succeeds`() = runTest {
        val taskId = "1"
        val expectedMessage = "Task deleted successfully"

        coEvery { todoApiService.deleteTask(taskId) } returns ApiResponse.success(expectedMessage)
        coEvery { taskDao.deleteById(taskId) } returns Unit

        val result = taskRepositoryImpl.deleteTask(taskId)

        assertTrue(result.isSuccess)
        assertEquals(expectedMessage, result.getOrNull())
    }

    @Test
    fun `deleteTask should handle API failure`() = runTest {
        val taskId = "1"

        coEvery { todoApiService.deleteTask(taskId) } throws Exception("API error")
        coEvery { taskDao.deleteById(taskId) } returns Unit

        val result = taskRepositoryImpl.deleteTask(taskId)

        assertTrue(result.isFailure)
        assertEquals("API error", result.exceptionOrNull()?.message)
    }

    @Test
    fun `completeTask should return success when API call succeeds`() = runTest {
        val taskId = "1"
        val expectedMessage = "Task completed successfully"

        coEvery { todoApiService.completeTask(taskId) } returns ApiResponse.success(expectedMessage)
        coEvery { taskDao.completeTask(taskId) } returns Unit

        val result = taskRepositoryImpl.completeTask(taskId)

        assertTrue(result.isSuccess)
        assertEquals(expectedMessage, result.getOrNull())
    }

    @Test
    fun `completeTask should handle API failure`() = runTest {
        val taskId = "1"

        coEvery { todoApiService.completeTask(taskId) } throws Exception("API error")
        coEvery { taskDao.completeTask(taskId) } returns Unit

        val result = taskRepositoryImpl.completeTask(taskId)

        assertTrue(result.isFailure)
        assertEquals("API error", result.exceptionOrNull()?.message)
    }

    @Test
    fun `getTasks should handle empty API response`() = runTest {
        coEvery { todoApiService.getTasks() } returns emptyList()
        coEvery { taskDao.insertAll(any()) } returns Unit

        val result = taskRepositoryImpl.getTasks()

        assertTrue(result.isSuccess)
        assertTrue(result.getOrNull()?.isEmpty() == true)
    }

    @Test
    fun `getTasks should handle empty database response`() = runTest {
        coEvery { todoApiService.getTasks() } throws Exception("Network error")
        coEvery { taskDao.getAllTasks() } returns emptyList()

        val result = taskRepositoryImpl.getTasks()

        assertTrue(result.isSuccess)
        assertTrue(result.getOrNull()?.isEmpty() == true)
    }

    @Test
    fun `createTask should handle database error`() = runTest {
        val now = LocalDateTime.now()
        val task = Task(
            id = "0",
            title = "New Task",
            description = "New description",
            priority = TaskPriority.HIGH,
            dueDate = LocalDateTime.now().plusDays(1),
            completed = false,
            createdAt = now,
            updatedAt = now
        )

        coEvery { todoApiService.createTask(any()) } returns "Success"
        coEvery { taskDao.insert(any()) } throws Exception("Database error")

        val result = taskRepositoryImpl.createTask(task)

        assertTrue(result.isFailure)
        assertEquals("Database error", result.exceptionOrNull()?.message)
    }

    @Test
    fun `updateTask should handle database error`() = runTest {
        val now = LocalDateTime.now()
        val task = Task(
            id = "1",
            title = "Updated Task",
            description = "Updated description",
            priority = TaskPriority.MEDIUM,
            dueDate = LocalDateTime.now().plusDays(1),
            completed = false,
            createdAt = now,
            updatedAt = now
        )

        coEvery { todoApiService.updateTask(any()) } returns "Success"
        coEvery { taskDao.update(any()) } throws Exception("Database error")

        val result = taskRepositoryImpl.updateTask(task)

        assertTrue(result.isFailure)
        assertEquals("Database error", result.exceptionOrNull()?.message)
    }

    @Test
    fun `deleteTask should handle database error`() = runTest {
        val taskId = "1"

        coEvery { todoApiService.deleteTask(taskId) } returns "Success"
        coEvery { taskDao.deleteById(taskId) } throws Exception("Database error")

        val result = taskRepositoryImpl.deleteTask(taskId)

        assertTrue(result.isFailure)
        assertEquals("Database error", result.exceptionOrNull()?.message)
    }

    @Test
    fun `completeTask should handle database error`() = runTest {
        val taskId = "1"

        coEvery { todoApiService.completeTask(taskId) } returns "Success"
        coEvery { taskDao.completeTask(taskId) } throws Exception("Database error")

        val result = taskRepositoryImpl.completeTask(taskId)

        assertTrue(result.isFailure)
        assertEquals("Database error", result.exceptionOrNull()?.message)
    }
} 