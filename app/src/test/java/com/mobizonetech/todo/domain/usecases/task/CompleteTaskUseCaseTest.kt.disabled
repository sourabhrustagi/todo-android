package com.mobizonetech.todo.domain.usecases.task

import com.mobizonetech.todo.domain.models.Task
import com.mobizonetech.todo.domain.models.TaskPriority
import com.mobizonetech.todo.domain.repository.TaskRepository
import io.mockk.coEvery
import io.mockk.mockk
import kotlinx.coroutines.test.runTest
import org.junit.Assert.assertEquals
import org.junit.Assert.assertFalse
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Test
import java.time.LocalDateTime

class CompleteTaskUseCaseTest {

    private lateinit var completeTaskUseCase: CompleteTaskUseCase
    private lateinit var taskRepository: TaskRepository

    @Before
    fun setup() {
        taskRepository = mockk()
        completeTaskUseCase = CompleteTaskUseCase(taskRepository)
    }

    @Test
    fun `complete task should return success`() = runTest {
        val taskId = 1
        val expectedMessage = "Task completed successfully"
        
        coEvery { taskRepository.completeTask(taskId) } returns Result.success(expectedMessage)
        
        val result = completeTaskUseCase(taskId)
        
        assertTrue(result.isSuccess)
        assertEquals(expectedMessage, result.getOrNull())
    }

    @Test
    fun `complete task should handle repository failure`() = runTest {
        val taskId = 1
        val errorMessage = "Task not found"
        
        coEvery { taskRepository.completeTask(taskId) } returns Result.failure(Exception(errorMessage))
        
        val result = completeTaskUseCase(taskId)
        
        assertTrue(result.isFailure)
        assertEquals(errorMessage, result.exceptionOrNull()?.message)
    }

    @Test
    fun `complete task with invalid ID should fail`() = runTest {
        val taskId = -1
        val errorMessage = "Invalid task ID"
        
        coEvery { taskRepository.completeTask(taskId) } returns Result.failure(Exception(errorMessage))
        
        val result = completeTaskUseCase(taskId)
        
        assertTrue(result.isFailure)
        assertEquals(errorMessage, result.exceptionOrNull()?.message)
    }

    @Test
    fun `complete already completed task should succeed`() = runTest {
        val taskId = 1
        val expectedMessage = "Task already completed"
        
        coEvery { taskRepository.completeTask(taskId) } returns Result.success(expectedMessage)
        
        val result = completeTaskUseCase(taskId)
        
        assertTrue(result.isSuccess)
        assertEquals(expectedMessage, result.getOrNull())
    }

    @Test
    fun `complete task with zero ID should fail`() = runTest {
        val taskId = 0
        val errorMessage = "Invalid task ID"
        
        coEvery { taskRepository.completeTask(taskId) } returns Result.failure(Exception(errorMessage))
        
        val result = completeTaskUseCase(taskId)
        
        assertTrue(result.isFailure)
        assertEquals(errorMessage, result.exceptionOrNull()?.message)
    }

    @Test
    fun `complete task with large ID should succeed`() = runTest {
        val taskId = 999999
        val expectedMessage = "Task completed successfully"
        
        coEvery { taskRepository.completeTask(taskId) } returns Result.success(expectedMessage)
        
        val result = completeTaskUseCase(taskId)
        
        assertTrue(result.isSuccess)
        assertEquals(expectedMessage, result.getOrNull())
    }

    @Test
    fun `network error should be handled properly`() = runTest {
        val taskId = 1
        val errorMessage = "Network error occurred"
        
        coEvery { taskRepository.completeTask(taskId) } returns Result.failure(Exception(errorMessage))
        
        val result = completeTaskUseCase(taskId)
        
        assertTrue(result.isFailure)
        assertEquals(errorMessage, result.exceptionOrNull()?.message)
    }

    @Test
    fun `database error should be handled properly`() = runTest {
        val taskId = 1
        val errorMessage = "Database error occurred"
        
        coEvery { taskRepository.completeTask(taskId) } returns Result.failure(Exception(errorMessage))
        
        val result = completeTaskUseCase(taskId)
        
        assertTrue(result.isFailure)
        assertEquals(errorMessage, result.exceptionOrNull()?.message)
    }

    @Test
    fun `multiple complete calls should work correctly`() = runTest {
        val taskId = 1
        val expectedMessage = "Task completed successfully"
        
        coEvery { taskRepository.completeTask(taskId) } returns Result.success(expectedMessage)
        
        val result1 = completeTaskUseCase(taskId)
        val result2 = completeTaskUseCase(taskId)
        
        assertTrue(result1.isSuccess)
        assertTrue(result2.isSuccess)
        assertEquals(expectedMessage, result1.getOrNull())
        assertEquals(expectedMessage, result2.getOrNull())
    }

    @Test
    fun `complete task should handle null response`() = runTest {
        val taskId = 1
        val errorMessage = "Task completion failed"
        
        coEvery { taskRepository.completeTask(taskId) } returns Result.failure(Exception(errorMessage))
        
        val result = completeTaskUseCase(taskId)
        
        assertTrue(result.isFailure)
        assertEquals(errorMessage, result.exceptionOrNull()?.message)
    }
} 